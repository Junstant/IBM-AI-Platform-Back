services:
  #? ======================== POSTGRES ========================
  postgres:
    image: postgres:15-alpine
    container_name: postgres_ai_platform
    restart: always
    ports:
      - "${DB_PORT:-8070}:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  #? ======================== MODEL DOWNLOADER ========================
  model-downloader:
    image: curlimages/curl:latest
    container_name: model-downloader
    user: "root"
    volumes:
      - models_volume:/models
    environment:
      - TOKEN_HUGGHINGFACE=${TOKEN_HUGGHINGFACE}
    command: >
      sh -c '
        # Gemma 2B
        GEMMA_PATH="/models/gemma-2-2b-it-Q4_K_S.gguf";
        if [ ! -f "$$GEMMA_PATH" ]; then
          echo "Modelo Gemma 2B no encontrado. Descargando...";
          curl -L --header "Authorization: Bearer $$TOKEN_HUGGHINGFACE" "https://huggingface.co/bartowski/gemma-2-2b-it-GGUF/resolve/main/gemma-2-2b-it-Q4_K_S.gguf" --output "$$GEMMA_PATH";
          echo "✅ Modelo Gemma 2B descargado.";
        else
          echo "✅ Modelo Gemma 2B ya existe.";
        fi

        # Gemma 4B
        GEMMA_PATH="/models/google_gemma-3-4b-it-Q4_K_S.gguf";
        if [ ! -f "$$GEMMA_PATH" ]; then
          echo "Modelo Gemma 4B no encontrado. Descargando...";
          curl -L --header "Authorization: Bearer $$TOKEN_HUGGHINGFACE" "https://huggingface.co/bartowski/google_gemma-3-4b-it-GGUF/resolve/main/google_gemma-3-4b-it-Q4_K_S.gguf" --output "$$GEMMA_PATH";
          echo "✅ Modelo Gemma 4B descargado.";
        else
          echo "✅ Modelo Gemma 4B ya existe.";
        fi

        # Gemma 12B
        GEMMA_PATH="/models/google_gemma-3-12b-it-Q4_K_S.gguf";
        if [ ! -f "$$GEMMA_PATH" ]; then
          echo "Modelo Gemma 12B no encontrado. Descargando...";
          curl -L --header "Authorization: Bearer $$TOKEN_HUGGHINGFACE" "https://huggingface.co/bartowski/google_gemma-3-12b-it-GGUF/resolve/main/google_gemma-3-12b-it-Q4_K_S.gguf" --output "$$GEMMA_PATH";
          echo "✅ Modelo Gemma 12B descargado.";
        else
          echo "✅ Modelo Gemma 12B ya existe.";
        fi

        # Mistral 7B
        MISTRAL_PATH="/models/Mistral-7B-Instruct-v0.3-Q4_K_S.gguf";
        if [ ! -f "$$MISTRAL_PATH" ]; then
          echo "Modelo Mistral 7B no encontrado. Descargando...";
          curl -L --header "Authorization: Bearer $$TOKEN_HUGGHINGFACE" "https://huggingface.co/bartowski/Mistral-7B-Instruct-v0.3-GGUF/resolve/main/Mistral-7B-Instruct-v0.3-Q4_K_S.gguf" --output "$$MISTRAL_PATH";
          echo "✅ Modelo Mistral 7B descargado.";
        else
          echo "✅ Modelo Mistral 7B ya existe.";
        fi

        # Deepseek 8B
        DEEPSEEK_PATH="/models/DeepSeek-R1-Distill-Qwen-7B-Q4_K_L.gguf";
        if [ ! -f "$$DEEPSEEK_PATH" ]; then
          echo "Modelo Deepseek 8B no encontrado. Descargando...";
          curl -L --header "Authorization: Bearer $$TOKEN_HUGGHINGFACE" "https://huggingface.co/bartowski/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/main/DeepSeek-R1-Distill-Qwen-7B-Q4_K_L.gguf" --output "$$DEEPSEEK_PATH";
          echo "✅ Modelo Deepseek 8B descargado.";
        else
          echo "✅ Modelo Deepseek 8B ya existe.";
        fi

        # Deepseek 14B
        DEEPSEEK_PATH="/models/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf";
        if [ ! -f "$$DEEPSEEK_PATH" ]; then
          echo "Modelo Deepseek 14B no encontrado. Descargando...";
          curl -L --header "Authorization: Bearer $$TOKEN_HUGGHINGFACE" "https://huggingface.co/bartowski/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/main/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf" --output "$$DEEPSEEK_PATH";
          echo "✅ Modelo Deepseek 14B descargado.";
        else
          echo "✅ Modelo Deepseek 14B ya existe.";
        fi

      '
    networks:
      - ai_platform_network

  #^ ======================== GEMMA 2B ========================
  gemma-2b:
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: gemma-2b
    user: "root"
    restart: always
    ports:
      - "${LLM_GEMMA_PORT:-8085}:8080"
    volumes:
      - models_volume:/models
    networks:
      - ai_platform_network
    command: ["--host", "0.0.0.0", "--port", "8080", "-m", "/models/gemma-2-2b-it-Q4_K_S.gguf", "--prio", "3", "-c", "4096", "-b", "32", "-t", "32", "-n", "-1"]
    depends_on:
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  #^ ======================== GEMMA 4B ========================
  gemma-4b:
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: gemma-4b
    user: "root"
    restart: always
    ports:
      - "${LLM_GEMMA_PORT:-8086}:8080"
    volumes:
      - models_volume:/models
    networks:
      - ai_platform_network
    command: ["--host", "0.0.0.0", "--port", "8080", "-m", "/models/google_gemma-3-4b-it-Q4_K_S.gguf", "--prio", "3", "-c", "4096", "-b", "32", "-t", "32", "-n", "-1"]
    depends_on:
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  #^ ======================== GEMMA 12B ========================
  gemma-12b:
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: gemma-12b
    user: "root"
    restart: always
    ports:
      - "${LLM_GEMMA_PORT:-8087}:8080"
    volumes:
      - models_volume:/models
    networks:
      - ai_platform_network
    command: ["--host", "0.0.0.0", "--port", "8080", "-m", "/models/google_gemma-3-12b-it-Q4_K_S.gguf", "--prio", "3", "-c", "4096", "-b", "32", "-t", "32", "-n", "-1"]
    depends_on:
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  #^ ======================== MISTRAL 7b ========================
  mistral-7b:
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: mistral-7b
    user: "root"
    restart: always
    ports:
      - "${LLM_MISTRAL_PORT:-8088}:8080"
    volumes:
      - models_volume:/models
    networks:
      - ai_platform_network
    command: ["--host", "0.0.0.0", "--port", "8080", "-m", "/models/Mistral-7B-Instruct-v0.3-Q4_K_S.gguf", "--prio", "3", "-c", "4096", "-b", "32", "-t", "32", "-n", "-1"]
    depends_on:
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s
  

  #^ ======================== DEEPSEEK 8B ========================
  deepseek-8b:
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: deepseek-8b
    user: "root"
    restart: always
    ports:
      - "${LLM_DEEPSEEK_PORT:-8089}:8080"
    volumes:
      - models_volume:/models
    networks:
      - ai_platform_network
    command: ["--host", "0.0.0.0", "--port", "8080", "-m", "/models/DeepSeek-R1-Distill-Qwen-7B-Q4_K_L.gguf", "--prio", "3", "-c", "4096", "-b", "32", "-t", "32", "-n", "-1"]
    depends_on:
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  #^ ======================== DEEPSEEK 14B ========================
  deepseek-14b:
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: deepseek-14b
    user: "root"
    restart: always
    ports:
      - "${LLM_DEEPSEEK_PORT:-8090}:8080"
    volumes:
      - models_volume:/models
    networks:
      - ai_platform_network
    command: ["--host", "0.0.0.0", "--port", "8080", "-m", "/models/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf", "--prio", "3", "-c", "4096", "-b", "32", "-t", "32", "-n", "-1"]
    depends_on:
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  #% ======================== TEXTOSQL API ========================
  textosql-api:
    build:
      context: ./textoSql
      dockerfile: Dockerfile
    container_name: textosql-api
    restart: always
    ports:
      - "${TEXTOSQL_API_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DB_NAME_TEXTOSQL=${DB_NAME_TEXTOSQL:-banco_global}
      - DB_HOST=postgres_ai_platform
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - LLM_HOST=gemma-4b
      - LLM_PORT=8080
    volumes:
      - ./textoSql:/app
    networks:
      - ai_platform_network
    depends_on:
      postgres:
        condition: service_healthy
      gemma-4b:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  #% ======================== FRAUDE API ========================
  fraude-api:
    build:
      context: ./fraude
      dockerfile: Dockerfile
    container_name: fraude-api
    restart: always
    ports:
      - "${FRAUDE_API_PORT:-8001}:8000"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres_ai_platform
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - ./fraude:/app
    networks:
      - ai_platform_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

volumes:
  postgres_data:
  postgres_backups:
  models_volume:

networks:
  ai_platform_network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-platform_ai_lj}_network

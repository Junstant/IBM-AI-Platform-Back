services:
  # === BASE DE DATOS (Sin cambios, es un buen servicio) ===
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: postgres_ai_platform
    restart: always
    ports:
      - "${DB_PORT:-8070}:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # === DESCARGA DEL MODELO (Emulación del 'initContainer' de Kubernetes) ===
  model-downloader:
    image: curlimages/curl:latest # Imagen ligera solo con curl
    container_name: model-downloader
    volumes:
      - models_volume:/models # Comparte el volumen con el servidor LLM
    command: >
      sh -c '
        MODEL_PATH="/models/google_gemma-3-4b-it-Q4_K_M.gguf";
        MODEL_URL="https://huggingface.co/bartowski/google_gemma-3-4b-it-GGUF/resolve/main/google_gemma-3-4b-it-Q4_K_M.gguf";
        if [ ! -f $$MODEL_PATH ]; then
          echo "Descargando modelo desde $$MODEL_URL...";
          curl -L $$MODEL_URL --output $$MODEL_PATH;
          echo "✅ Modelo descargado.";
        else
          echo "✅ El modelo ya existe en $$MODEL_PATH.";
        fi
      '
    networks:
      - ai_platform_network

  # === SERVIDOR LLM (Simplificado y robusto) ===
  llm-server:
    # CAMBIO: Usamos la imagen v8 del manifiesto de Kubernetes. ¡Asegúrate de que sea compatible con ppc64le!
    image: quay.io/daniel_casali/llama.cpp-mma:v8
    container_name: llm-server
    restart: always
    ports:
      - "${LLM_PORT:-8080}:8080"
    volumes:
      - models_volume:/models # Usa el mismo volumen que el downloader
    networks:
      - ai_platform_network
    # CAMBIO: Comando simplificado, tomado del manifiesto de Kubernetes
    command: [
      "--host", "0.0.0.0",
      "--port", "8080",
      "-m", "/models/google_gemma-3-4b-it-Q4_K_M.gguf",
      "--prio", "3",
      "-c", "4096",
      "-b", "32",
      "-t", "32",
      "-n", "-1"
    ]
    depends_on:
      # CAMBIO: Espera a que el contenedor de descarga termine con éxito ANTES de iniciar
      model-downloader:
        condition: service_completed_successfully
    healthcheck:
      # CAMBIO: Healthcheck adaptado del readinessProbe de Kubernetes
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # === APLICACIONES ===
  textosql-api:
    build: 
      context: ./textoSql
      dockerfile: Dockerfile
    container_name: textosql-api
    restart: always
    ports:
      - "${TEXTOSQL_API_PORT:-8001}:8000"
    env_file:
      - .env
    environment:
      - DB_NAME_TEXTOSQL=${DB_NAME_TEXTOSQL:-banco_global}
      - DB_HOST=postgres_ai_platform
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - LLM_HOST=llm-server
      - LLM_PORT=8080
    volumes:
      - ./textoSql:/app
    networks:
      - ai_platform_network
    depends_on:
      # CAMBIO: Ahora depende de que AMBOS servicios estén saludables
      postgres:
        condition: service_healthy
      llm-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  fraude-api:
    build: 
      context: ./fraude
      dockerfile: Dockerfile
    container_name: fraude-api
    restart: always
    ports:
      - "${FRAUDE_API_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres_ai_platform
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - ./fraude:/app
    networks:
      - ai_platform_network
    depends_on:
      # CAMBIO: Ahora depende de que AMBOS servicios estén saludables
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

volumes:
  postgres_data:
  postgres_backups:
  models_volume: # NUEVO: Volumen dedicado para los modelos de IA

networks:
  ai_platform_network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-platform_ai_lj}_network

services:
  # === BASE DE DATOS ===
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: postgres_ai_platform
    restart: always
    ports:
      - "${DB_PORT:-8070}:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # === MODELO LLM PRINCIPAL ===
  # Gemma 2B - Modelo peque√±o y eficiente
  llm-server:
    image: quay.io/daniel_casali/llama.cpp-mma:v5
    container_name: llm-server
    restart: always
    ports:
      - "${LLM_PORT:-8080}:8080"
    volumes:
      - ./models:/models
    networks:
      - ai_platform_network
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "if [ ! -f /models/gemma-2-2b-it-Q4_K_S.gguf ]; then
        echo '‚ö†Ô∏è  Modelo no encontrado en /models/gemma-2-2b-it-Q4_K_S.gguf'
        echo 'üìã Use el script de instalaci√≥n para descargar modelos:'
        echo '    ./ai-platform.sh'
        echo '    Opci√≥n 5: Descargar modelos manualmente'
        echo ''
        echo 'üí° O descargue manualmente desde:'
        echo '    https://huggingface.co/lmstudio-community/gemma-2-2b-it-GGUF/resolve/main/gemma-2-2b-it-Q4_K_S.gguf'
        echo ''
        echo 'üîÑ Reintentando en 60 segundos...'
        sleep 60
        exit 1
      else
        echo '‚úÖ Modelo encontrado: gemma-2-2b-it-Q4_K_S.gguf'
        echo 'üöÄ Iniciando servidor LLM...'
      fi
      exec /usr/local/bin/llama-server --host 0.0.0.0 --port 8080 \
        -m /models/gemma-2-2b-it-Q4_K_S.gguf \
        --prio 3 -c 2048 -b 32 -t 16 -n -1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # === APLICACIONES ===
  textosql-api:
    build: 
      context: ./textoSql
      dockerfile: Dockerfile
    container_name: textosql-api
    restart: always
    ports:
      - "${TEXTOSQL_API_PORT:-8001}:8000"
    env_file:
      - .env
    environment:
      - DB_NAME_TEXTOSQL=${DB_NAME_TEXTOSQL:-banco_global}
      - DB_HOST=postgres_ai_platform
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - LLM_HOST=llm-server
      - LLM_PORT=8080
    volumes:
      - ./textoSql:/app
    networks:
      - ai_platform_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  fraude-api:
    build: 
      context: ./fraude
      dockerfile: Dockerfile
    container_name: fraude-api
    restart: always
    ports:
      - "${FRAUDE_API_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres_ai_platform
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - ./fraude:/app
    networks:
      - ai_platform_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local

networks:
  ai_platform_network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-platform_ai_lj}_network
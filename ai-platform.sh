#!/bin/bash#!/bin/bash



# Script para gestionar AI Platform con m√∫ltiples modelos# Scrip    echo "üîß C    echo "üîß Configuraci√≥n y Administraci√≥n:"

echo "üöÄ AI PLATFORM - GESTOR M√öLTIPLES MODELOS"    echo "   1) üì• Descargar modelo Mistral 7B"

echo "=========================================="    echo "   2) üöÄ Iniciar todos los servicios"

    echo "   3) üõë Detener todos los servicios" 

cd "$(dirname "$0")"    echo "   4) üîÑ Reiniciar servicios"

    echo "   5) üìä Ver estado de servicios"

# Funci√≥n para logging    echo "   6) üìã Ver logs en tiempo real"

log() {    echo "   7) üßπ Limpiar y eliminar contenedores"

    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"    echo "   8) üîç Diagn√≥stico del sistema"

}    echo "   9) üìö Ver documentaci√≥n de APIs"

    echo "  10) üåç Configurar variables de entorno"

# Funci√≥n para mostrar men√∫    echo "   0) üö™ Salir"y Administraci√≥n:"

show_menu() {    echo "   1) üì• Descargar modelo Mistral 7B"

    clear    echo "   2) üöÄ Iniciar todos los servicios"

    echo "üöÄ === IBM AI Platform Management === üöÄ"    echo "   3) üõë Detener todos los servicios" 

    echo ""    echo "   4) üîÑ Reiniciar servicios"

    echo "üèóÔ∏è  Arquitectura detectada: $(uname -m)"    echo "          1)

    echo ""            download_mistral_7b

    echo "üîß GESTI√ìN B√ÅSICA:"            ;; üìä Ver estado de servicios"

    echo "  1) üöÄ Iniciar todos los servicios"    echo "   6) üìã Ver logs en tiempo real"

    echo "  2) üõë Detener todos los servicios"    echo "   7) üßπ Limpiar y eliminar contenedores"

    echo "  3) üîÑ Reinicio limpio completo"    echo "   8) üîç Diagn√≥stico del sistema"

    echo ""    echo "   9) üìö Ver documentaci√≥n de APIs"

    echo "üì• GESTI√ìN DE MODELOS:"    echo "  10) üåç Configurar variables de entorno"

    echo "  4) üì• Descargar modelo Gemma 2B (ligero)"    echo "  11) ‚öôÔ∏è  Configuraci√≥n ppc64le (PowerPC)"

    echo "  5) üì• Descargar modelo Mistral 7B (potente)"    echo "   0) üö™ Salir"o para gestionar AI Platform

    echo "  6) üì• Descargar TODOS los modelos autom√°ticamente"echo "üöÄ AI PLATFORM - GESTOR SIMPLIFICADO"

    echo "  7) üìä Ver estado de modelos"echo "===================================="

    echo "  8) üßπ Limpiar modelos descargados"

    echo ""cd "$(dirname "$0")"

    echo "üîç DIAGN√ìSTICO:"

    echo "  9) üìä Ver estado actual"# Funci√≥n para logging

    echo " 10) üìã Ver logs de servicios"log() {

    echo " 11) üåê Probar APIs de modelos"    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"

    echo ""}

    echo "‚öôÔ∏è CONFIGURACI√ìN:"

    echo " 12) üåç Crear archivo .env"# Funci√≥n para mostrar men√∫

    echo " 13) ‚öôÔ∏è Configuraci√≥n espec√≠fica para ppc64le"show_menu() {

    echo ""    clear

    echo "  0) üö™ Salir"    echo "üöÄ === IBM AI Platform Management === üöÄ"

    echo ""    echo ""

}    echo "ÔøΩÔ∏è  Arquitectura detectada: $(uname -m)"

    echo ""

# Funci√≥n para verificar requisitos    echo "üîß Configuraci√≥n y Administraci√≥n:"

check_requirements() {    echo "   1) ÔøΩ Descargar modelo Gemma 2B"

    log "üîç Verificando requisitos..."    echo "   2) üöÄ Iniciar todos los servicios"

        echo "   3) üõë Detener todos los servicios" 

    # Verificar arquitectura    echo "   4) üîÑ Reiniciar servicios"

    local ARCH=$(uname -m)    echo "   5) ÔøΩ Ver estado de servicios"

    if [[ "$ARCH" == "ppc64le" ]]; then    echo "   6) üìã Ver logs en tiempo real"

        log "‚úÖ Arquitectura ppc64le detectada"    echo "   7) üßπ Limpiar y eliminar contenedores"

    else    echo "   8) üîç Diagn√≥stico del sistema"

        log "‚ö†Ô∏è Arquitectura: $ARCH (este script est√° optimizado para ppc64le)"    echo "   9) üìö Ver documentaci√≥n de APIs"

    fi    echo "  10) üåç Configurar variables de entorno"

        echo "  11) ‚öôÔ∏è  Configuraci√≥n ppc64le (PowerPC)"

    # Verificar Docker    echo "   0) üö™ Salir"

    if ! docker --version > /dev/null 2>&1; then}

        log "‚ùå Docker no est√° instalado"

        return 1# Funci√≥n para verificar requisitos

    ficheck_requirements() {

        log "üîç Verificando requisitos..."

    # Verificar Docker Compose    

    if ! docker-compose --version > /dev/null 2>&1; then    # Verificar arquitectura

        log "‚ùå Docker Compose no est√° disponible"    local ARCH=$(uname -m)

        return 1    if [[ "$ARCH" == "ppc64le" ]]; then

    fi        log "‚úÖ Arquitectura ppc64le detectada"

        else

    log "‚úÖ Requisitos verificados"        log "‚ö†Ô∏è Arquitectura: $ARCH (este script est√° optimizado para ppc64le)"

    return 0    fi

}    

    # Verificar Docker

# Funci√≥n para descargar m√∫ltiples modelos autom√°ticamente    if ! docker --version > /dev/null 2>&1; then

download_all_models() {        log "‚ùå Docker no est√° instalado"

    log "üì• Descargando TODOS los modelos autom√°ticamente..."        return 1

        fi

    # Crear directorio de modelos    

    mkdir -p models    # Verificar Docker Compose

        if ! docker-compose --version > /dev/null 2>&1; then

    # Lista de modelos a descargar        log "‚ùå Docker Compose no est√° disponible"

    declare -A models=(        return 1

        ["gemma-2-2b-it-Q4_K_S.gguf"]="https://huggingface.co/lmstudio-community/gemma-2-2b-it-GGUF/resolve/main/gemma-2-2b-it-Q4_K_S.gguf"    fi

        ["mistral-7b-instruct-v0.3.Q4_K_M.gguf"]="https://huggingface.co/SanctumAI/Mistral-7B-Instruct-v0.3-GGUF/resolve/main/mistral-7b-instruct-v0.3.Q4_K_M.gguf"    

    )    log "‚úÖ Requisitos verificados"

        return 0

    log "üìã Modelos a descargar: ${#models[@]}"}

    echo "‚Ä¢ Gemma 2B (~1.5GB) - Ligero y eficiente"

    echo "‚Ä¢ Mistral 7B (~4GB) - Potente y vers√°til"# Funci√≥n para descargar Mistral 7B

    echo ""download_mistral_7b() {

        log "üì• Descargando modelo Mistral 7B..."

    for filename in "${!models[@]}"; do    

        local url="${models[$filename]}"    # Crear directorio de modelos

            mkdir -p models

        if [ -f "models/$filename" ]; then    

            log "‚úÖ Modelo $filename ya existe"    local filename="mistral-7b-instruct-v0.3.Q4_K_M.gguf"

            ls -lh "models/$filename"    local url="https://huggingface.co/SanctumAI/Mistral-7B-Instruct-v0.3-GGUF/resolve/main/mistral-7b-instruct-v0.3.Q4_K_M.gguf"

        else    

            log "‚è≥ Descargando $filename... (esto puede tomar varios minutos)"    if [ -f "models/$filename" ]; then

            if curl -L --progress-bar -o "models/$filename" "$url"; then        log "‚úÖ Modelo Mistral 7B ya existe"

                log "‚úÖ Modelo $filename descargado exitosamente"        ls -lh "models/$filename"

                ls -lh "models/$filename"        return 0

            else    fi

                log "‚ùå Error descargando $filename"    

                rm -f "models/$filename"    log "‚è≥ Descargando... (esto puede tomar varios minutos)"

            fi    if curl -L --progress-bar -o "models/$filename" "$url"; then

        fi        log "‚úÖ Modelo Mistral 7B descargado exitosamente"

        echo ""        ls -lh "models/$filename"

    done        return 0

        else

    log "‚úÖ Descarga de modelos completada"        log "‚ùå Error descargando Mistral 7B"

}        rm -f "models/$filename"

        return 1

# Funci√≥n para descargar Gemma 2B    fi

download_gemma_2b() {}

    log "üì• Descargando modelo Gemma 2B (ligero y eficiente)..."

    # Funci√≥n para mostrar otros modelos disponibles

    # Crear directorio de modelosshow_other_models() {

    mkdir -p models    echo ""

        echo "üìã OTROS MODELOS DISPONIBLES:"

    local filename="gemma-2-2b-it-Q4_K_S.gguf"    echo "============================"

    local url="https://huggingface.co/lmstudio-community/gemma-2-2b-it-GGUF/resolve/main/gemma-2-2b-it-Q4_K_S.gguf"    echo ""

        echo "Para usar otros modelos, necesitar√°:"

    if [ -f "models/$filename" ]; then    echo "1. Descargar el modelo manualmente"

        log "‚úÖ Modelo Gemma 2B ya existe"    echo "2. Modificar docker-compose.yaml para apuntar al nuevo modelo"

        ls -lh "models/$filename"    echo ""

        return 0    echo "Modelos sugeridos:"

    fi    echo "‚Ä¢ Gemma 2B (~1.5GB): https://huggingface.co/lmstudio-community/gemma-2-2b-it-GGUF"

        echo "‚Ä¢ Granite 8B (~5GB): https://huggingface.co/bartowski/granite-3.3-8b-instruct-GGUF"

    log "‚è≥ Descargando Gemma 2B (~1.5GB)... esto puede tomar varios minutos"    echo "‚Ä¢ Llama 3.2 3B (~2GB): https://huggingface.co/lmstudio-community/Llama-3.2-3B-Instruct-GGUF"

    if curl -L --progress-bar -o "models/$filename" "$url"; then    echo ""

        log "‚úÖ Modelo Gemma 2B descargado exitosamente"    echo "üí° Consejo: Mistral 7B est√° configurado por defecto para mejor compatibilidad"

        ls -lh "models/$filename"    echo ""

        return 0    read -p "Presiona Enter para continuar..."

    else}

        log "‚ùå Error descargando Gemma 2B"

        rm -f "models/$filename"# Funci√≥n para ver logs

        return 1view_logs() {

    fi    echo "üìã LOGS DE SERVICIOS"

}    echo "==================="

    echo ""

# Funci√≥n para descargar Mistral 7B    echo "Selecciona el servicio:"

download_mistral_7b() {    echo "1) PostgreSQL"

    log "üì• Descargando modelo Mistral 7B (potente y vers√°til)..."    echo "2) TextoSQL API"

        echo "3) Fraude API"

    # Crear directorio de modelos    echo "4) LLM Server (Mistral 7B)"

    mkdir -p models    echo "5) Todos los servicios"

        echo ""

    local filename="mistral-7b-instruct-v0.3.Q4_K_M.gguf"    read -p "Opci√≥n: " log_choice

    local url="https://huggingface.co/SanctumAI/Mistral-7B-Instruct-v0.3-GGUF/resolve/main/mistral-7b-instruct-v0.3.Q4_K_M.gguf"    

        case $log_choice in

    if [ -f "models/$filename" ]; then        1) docker-compose logs -f postgres ;;

        log "‚úÖ Modelo Mistral 7B ya existe"        2) docker-compose logs -f textosql-api ;;

        ls -lh "models/$filename"        3) docker-compose logs -f fraude-api ;;

        return 0        4) docker-compose logs -f llm-server ;;

    fi        5) docker-compose logs -f ;;

            *) echo "‚ùå Opci√≥n no v√°lida" ;;

    log "‚è≥ Descargando Mistral 7B (~4GB)... esto puede tomar varios minutos"    esac

    if curl -L --progress-bar -o "models/$filename" "$url"; then}

        log "‚úÖ Modelo Mistral 7B descargado exitosamente"

        ls -lh "models/$filename"# Funci√≥n para limpiar modelos

        return 0clean_models() {

    else    echo "üßπ LIMPIEZA DE MODELOS"

        log "‚ùå Error descargando Mistral 7B"    echo "====================="

        rm -f "models/$filename"    echo ""

        return 1    echo "‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° todos los modelos descargados"

    fi    echo "Tendr√°s que descargarlos nuevamente para usar el servidor LLM"

}    echo ""

    read -p "¬øEst√°s seguro? (s/N): " confirm

# Funci√≥n para ver estado de modelos    

view_model_status() {    if [[ $confirm =~ ^[Ss]$ ]]; then

    echo "üìä ESTADO DE MODELOS"        log "üßπ Limpiando modelos..."

    echo "==================="        rm -rf models/*

    echo ""        log "‚úÖ Modelos eliminados"

        else

    if [ -d "./models" ]; then        log "‚ùå Operaci√≥n cancelada"

        echo "Modelos disponibles en ./models/:"    fi

        if ls ./models/*.gguf >/dev/null 2>&1; then}

            ls -lh ./models/*.gguf | awk '{print "  ‚úÖ " $9 " (" $5 ")"}'

            echo ""# Funci√≥n para crear .env

            echo "Espacio total usado:"create_env() {

            du -sh ./models 2>/dev/null || echo "  No se pudo calcular"    log "‚öôÔ∏è Creando archivo .env..."

        else    

            echo "  ‚ùå No hay modelos descargados"    if [ -f .env ]; then

            echo "  üí° Use las opciones 4, 5 o 6 para descargar modelos"        echo "‚ö†Ô∏è El archivo .env ya existe. ¬øDesea sobrescribirlo?"

        fi        read -p "(s/N): " confirm

    else        if [[ ! $confirm =~ ^[Ss]$ ]]; then

        echo "‚ùå Directorio ./models no encontrado"            log "‚ùå Operaci√≥n cancelada"

    fi            return

            fi

    echo ""    fi

    echo "üê≥ CONTENEDORES DE MODELOS:"    

    echo "‚Ä¢ LLM Principal: puerto 8080"    cat > .env << 'EOF'

    echo "‚Ä¢ Gemma 2B:      puerto 9470"  # Configuraci√≥n de la base de datos

    echo "‚Ä¢ Mistral 7B:    puerto 8096"DB_HOST=postgres_ai_platform

}DB_PORT=8070

DB_USER=postgres

# Funci√≥n para probar APIs de modelosDB_PASSWORD=postgres

test_model_apis() {DB_NAME=postgres

    echo "üåê PROBANDO APIs DE MODELOS"DB_NAME_TEXTOSQL=banco_global

    echo "=========================="

    echo ""# APIs

    FRAUDE_API_PORT=8000

    # Probar LLM principal (puerto 8080)TEXTOSQL_API_PORT=8001

    echo "üß† LLM Principal (puerto 8080):"

    if curl -s -f http://localhost:8080/health >/dev/null 2>&1; then# Modelo LLM

        echo "  Estado: ‚úÖ Funcionando"LLM_PORT=8080

    elif curl -s http://localhost:8080 >/dev/null 2>&1; thenLLM_HOST=llm-server

        echo "  Estado: üîÑ Iniciando"

    else# Configuraci√≥n general

        echo "  Estado: ‚ùå No responde"COMPOSE_PROJECT_NAME=platform_ai_lj

    fiEOF

        

    # Probar Gemma 2B (puerto 9470)    log "‚úÖ Archivo .env creado exitosamente"

    echo "ü§ñ Gemma 2B (puerto 9470):"    echo ""

    if curl -s -f http://localhost:9470/health >/dev/null 2>&1; then    echo "üìã Contenido del archivo .env:"

        echo "  Estado: ‚úÖ Funcionando"    cat .env

    elif curl -s http://localhost:9470 >/dev/null 2>&1; then}

        echo "  Estado: üîÑ Iniciando"

    else# Funci√≥n para reinicio limpio

        echo "  Estado: ‚ùå No responde"clean_restart() {

    fi    log "üîÑ Ejecutando reinicio limpio..."

        

    # Probar Mistral 7B (puerto 8096)    log "üõë Deteniendo servicios..."

    echo "üöÄ Mistral 7B (puerto 8096):"    docker-compose down --remove-orphans

    if curl -s -f http://localhost:8096/health >/dev/null 2>&1; then    

        echo "  Estado: ‚úÖ Funcionando"    log "üßπ Limpiando recursos Docker..."

    elif curl -s http://localhost:8096 >/dev/null 2>&1; then    docker system prune -f

        echo "  Estado: üîÑ Iniciando"    

    else    log "üî® Reconstruyendo im√°genes..."

        echo "  Estado: ‚ùå No responde"    docker-compose build --no-cache

    fi    

        log "üöÄ Iniciando servicios..."

    echo ""    docker-compose up -d

    echo "üí° Comandos para probar generaci√≥n de texto:"    

    echo "curl -X POST \"http://localhost:8080/completion\" -H \"Content-Type: application/json\" -d '{\"prompt\": \"Hola, ¬øc√≥mo est√°s?\", \"n_predict\": 50}'"    log "‚úÖ Reinicio completado"

}}



# Funci√≥n para ver logs# Men√∫ principal

view_logs() {while true; do

    echo "üìã LOGS DE SERVICIOS"    show_menu

    echo "==================="    read -p "Selecciona una opci√≥n (0-10): " choice

    echo ""    

    echo "Selecciona el servicio:"    case $choice in

    echo "1) PostgreSQL"        1)

    echo "2) TextoSQL API"            if ! check_requirements; then

    echo "3) Fraude API"                echo ""

    echo "4) LLM Server Principal (puerto 8080)"                read -p "Presiona Enter para continuar..."

    echo "5) Gemma 2B Server (puerto 9470)"                continue

    echo "6) Mistral 7B Server (puerto 8096)"            fi

    echo "7) Todos los servicios"            

    echo ""            log "üöÄ Iniciando todos los servicios..."

    read -p "Opci√≥n: " log_choice            

                # Verificar si existe el modelo

    case $log_choice in            if [ ! -f "models/gemma-2-2b-it-Q4_K_S.gguf" ]; then

        1) docker-compose logs -f postgres ;;                echo "‚ö†Ô∏è Modelo no encontrado. El servidor LLM no funcionar√°."

        2) docker-compose logs -f textosql-api ;;                echo "üí° Use la opci√≥n 4 para descargar el modelo Gemma 2B"

        3) docker-compose logs -f fraude-api ;;                echo ""

        4) docker-compose logs -f llm-server ;;                read -p "¬øContinuar de todos modos? (s/N): " confirm

        5) docker-compose logs -f gemma2b-server ;;                if [[ ! $confirm =~ ^[Ss]$ ]]; then

        6) docker-compose logs -f mistral-server ;;                    continue

        7) docker-compose logs -f ;;                fi

        *) echo "‚ùå Opci√≥n no v√°lida" ;;            fi

    esac            

}            docker-compose up -d

            echo ""

# Funci√≥n para limpiar modelos            echo "üìä Estado actual:"

clean_models() {            docker-compose ps

    echo "üßπ LIMPIEZA DE MODELOS"            ;;

    echo "====================="        2)

    echo ""            log "üõë Deteniendo todos los servicios..."

    echo "‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° todos los modelos descargados"            docker-compose down

    echo "Tendr√°s que descargarlos nuevamente para usar los servidores LLM"            ;;

    echo ""        3)

    read -p "¬øEst√°s seguro? (s/N): " confirm            clean_restart

                ;;

    if [[ $confirm =~ ^[Ss]$ ]]; then        4)

        log "üßπ Limpiando modelos..."            download_gemma_2b

        rm -rf models/*            ;;

        log "‚úÖ Modelos eliminados"        5)

    else            show_other_models

        log "‚ùå Operaci√≥n cancelada"            ;;

    fi        6)

}            log "üìä Estado de modelos descargados:"

            if [ -d models ] && [ "$(ls -A models)" ]; then

# Funci√≥n para crear .env                ls -lh models/

create_env() {                echo ""

    log "‚öôÔ∏è Creando archivo .env..."                echo "üíæ Espacio total usado:"

                    du -sh models/

    if [ -f .env ]; then            else

        echo "‚ö†Ô∏è El archivo .env ya existe. ¬øDesea sobrescribirlo?"                echo "üìÅ No hay modelos descargados"

        read -p "(s/N): " confirm            fi

        if [[ ! $confirm =~ ^[Ss]$ ]]; then            ;;

            log "‚ùå Operaci√≥n cancelada"        7)

            return            clean_models

        fi            ;;

    fi        8)

                log "üìä Estado actual de servicios:"

    cat > .env << 'EOF'            docker-compose ps

# Configuraci√≥n de la base de datos            echo ""

DB_HOST=postgres_ai_platform            log "üîó URLs de acceso:"

DB_PORT=8070            echo "   PostgreSQL:     http://localhost:8070"

DB_USER=postgres            echo "   TextoSQL API:   http://localhost:8001/docs"

DB_PASSWORD=postgres            echo "   Fraude API:     http://localhost:8000/docs"

DB_NAME=postgres            echo "   LLM Server:     http://localhost:8080"

DB_NAME_TEXTOSQL=banco_global            ;;

        9)

# APIs            view_logs

FRAUDE_API_PORT=8000            ;;

TEXTOSQL_API_PORT=8001        10)

            create_env

# Modelo LLM Principal            ;;

LLM_PORT=8080        0)

LLM_HOST=llm-server            log "üëã ¬°Hasta luego!"

            exit 0

# Puertos espec√≠ficos de modelos            ;;

GEMMA2B_PORT=9470        *)

MISTRAL_PORT=8096            echo "‚ùå Opci√≥n no v√°lida. Por favor selecciona 0-10."

            ;;

# Configuraci√≥n general    esac

COMPOSE_PROJECT_NAME=platform_ai_lj    

EOF    echo ""

        read -p "Presiona Enter para continuar..."

    log "‚úÖ Archivo .env creado exitosamente"done
    echo ""
    echo "üìã Contenido del archivo .env:"
    cat .env
}

# Funci√≥n para reinicio limpio
clean_restart() {
    log "üîÑ Ejecutando reinicio limpio..."
    
    log "üõë Deteniendo servicios..."
    docker-compose down --remove-orphans
    
    log "üßπ Limpiando recursos Docker..."
    docker system prune -f
    
    log "üî® Reconstruyendo im√°genes..."
    docker-compose build --no-cache
    
    log "üöÄ Iniciando servicios..."
    docker-compose up -d
    
    log "‚úÖ Reinicio completado"
    
    echo ""
    echo "üìä Estado de servicios despu√©s del reinicio:"
    sleep 5
    docker-compose ps
}

# Funci√≥n para mostrar estado actual
show_status() {
    echo "üìä ESTADO ACTUAL DEL SISTEMA"
    echo "============================"
    echo ""
    
    echo "üê≥ CONTENEDORES:"
    docker-compose ps
    
    echo ""
    echo "üìÅ MODELOS:"
    if [ -d "./models" ] && ls ./models/*.gguf >/dev/null 2>&1; then
        ls -lh ./models/*.gguf | awk '{print "  " $9 " (" $5 ")"}'
    else
        echo "  ‚ùå No hay modelos descargados"
    fi
    
    echo ""
    echo "üíæ USO DE RECURSOS:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "No hay contenedores ejecut√°ndose"
}

# Men√∫ principal
while true; do
    show_menu
    read -p "Selecciona una opci√≥n (0-13): " choice
    
    case $choice in
        1)
            if ! check_requirements; then
                echo "‚ùå Requisitos no cumplidos"
                continue
            fi
            
            log "üöÄ Iniciando todos los servicios..."
            
            # Verificar si existen modelos
            if [ ! -d "./models" ] || ! ls ./models/*.gguf >/dev/null 2>&1; then
                echo "‚ö†Ô∏è No se encontraron modelos descargados"
                echo "üí° Use las opciones 4, 5 o 6 para descargar modelos primero"
                continue
            fi
            
            docker-compose up -d
            log "‚úÖ Servicios iniciados"
            
            echo ""
            echo "üåê URLs de acceso:"
            echo "‚Ä¢ TextoSQL API: http://localhost:8001/docs"
            echo "‚Ä¢ Fraude API:   http://localhost:8000/docs"
            echo "‚Ä¢ LLM Principal: http://localhost:8080"
            echo "‚Ä¢ Gemma 2B:     http://localhost:9470"
            echo "‚Ä¢ Mistral 7B:   http://localhost:8096"
            ;;
        2)
            log "üõë Deteniendo todos los servicios..."
            docker-compose down
            log "‚úÖ Servicios detenidos"
            ;;
        3)
            clean_restart
            ;;
        4)
            download_gemma_2b
            ;;
        5)
            download_mistral_7b
            ;;
        6)
            download_all_models
            ;;
        7)
            view_model_status
            ;;
        8)
            clean_models
            ;;
        9)
            show_status
            ;;
        10)
            view_logs
            ;;
        11)
            test_model_apis
            ;;
        12)
            create_env
            ;;
        13)
            echo "‚öôÔ∏è CONFIGURACI√ìN PPC64LE"
            echo "========================"
            echo "Configuraciones espec√≠ficas para arquitectura PowerPC aplicadas autom√°ticamente"
            echo "‚Ä¢ Optimizaciones VSX habilitadas"
            echo "‚Ä¢ Repositorios de wheels espec√≠ficos configurados"
            ;;
        0)
            log "üëã ¬°Hasta luego!"
            exit 0
            ;;
        *)
            echo "‚ùå Opci√≥n no v√°lida"
            ;;
    esac
    
    echo ""
    read -p "Presiona Enter para continuar..."
done
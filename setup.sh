#!/bin/bash
# Script simplificado de instalaci√≥n para AI Platform

set -e

echo "üöÄ INSTALACI√ìN SIMPLIFICADA DE AI PLATFORM"
echo "=========================================="

# Funci√≥n para logging
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# ===== VERIFICAR REQUISITOS =====
check_requirements() {
    log "üîç Verificando requisitos del sistema..."
    
    # Verificar sistema operativo
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        log "‚úÖ Sistema: Linux detectado"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        log "‚úÖ Sistema: macOS detectado"
    else
        log "‚ö†Ô∏è Sistema no reconocido, continuando..."
    fi
    
    # Verificar Docker
    if command -v docker &> /dev/null; then
        log "‚úÖ Docker est√° instalado: $(docker --version)"
    else
        log "‚ùå Docker no est√° instalado"
        log "üìã Por favor instale Docker desde: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    # Verificar Docker Compose
    if command -v docker-compose &> /dev/null; then
        log "‚úÖ Docker Compose est√° instalado: $(docker-compose --version)"
    else
        log "‚ùå Docker Compose no est√° instalado"
        log "üìã Por favor instale Docker Compose desde: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # Verificar que Docker est√© ejecut√°ndose
    if docker ps &> /dev/null; then
        log "‚úÖ Docker est√° ejecut√°ndose"
    else
        log "‚ùå Docker no est√° ejecut√°ndose"
        log "üìã Por favor inicie Docker y ejecute este script nuevamente"
        exit 1
    fi
    
    # Verificar espacio en disco (al menos 5GB)
    available_space=$(df . | tail -1 | awk '{print $4}')
    if [ "$available_space" -lt 5242880 ]; then  # 5GB en KB
        log "‚ö†Ô∏è Espacio en disco bajo (menos de 5GB disponibles)"
        log "üí° Se recomienda tener al menos 5GB libres para los modelos"
    else
        log "‚úÖ Espacio en disco suficiente"
    fi
    
    # Verificar memoria RAM (al menos 4GB)
    if command -v free &> /dev/null; then
        available_memory=$(free -m | awk 'NR==2{print $2}')
        if [ "$available_memory" -lt 4096 ]; then  # 4GB
            log "‚ö†Ô∏è RAM total menor a 4GB. El rendimiento puede ser limitado"
        else
            log "‚úÖ RAM suficiente: ${available_memory}MB"
        fi
    fi
}

# ===== PREPARAR PROYECTO =====
prepare_project() {
    log "üîß Preparando estructura del proyecto..."
    
    # Crear directorio de modelos
    mkdir -p models
    log "‚úÖ Directorio models creado"
    
    # Verificar permisos de scripts
    chmod +x ai-platform.sh
    chmod +x scripts/*.sh 2>/dev/null || true
    log "‚úÖ Permisos de scripts configurados"
    
    # Crear archivo .env si no existe
    if [ ! -f .env ]; then
        log "üìù Creando archivo .env..."
        cat > .env << 'EOF'
# Configuraci√≥n de la base de datos
DB_HOST=postgres_ai_platform
DB_PORT=8070
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME=postgres
DB_NAME_TEXTOSQL=banco_global

# APIs
FRAUDE_API_PORT=8000
TEXTOSQL_API_PORT=8001

# Modelo LLM
LLM_PORT=8080
LLM_HOST=llm-server

# Configuraci√≥n general
COMPOSE_PROJECT_NAME=platform_ai_lj
EOF
        log "‚úÖ Archivo .env creado"
    else
        log "‚úÖ Archivo .env ya existe"
    fi
}

# ===== INSTALAR DEPENDENCIAS =====
install_dependencies() {
    log "üì¶ Verificando dependencias adicionales..."
    
    # Verificar curl
    if command -v curl &> /dev/null; then
        log "‚úÖ curl est√° disponible"
    else
        log "‚ùå curl no est√° instalado"
        if command -v apt-get &> /dev/null; then
            log "üì¶ Instalando curl..."
            sudo apt-get update && sudo apt-get install -y curl
        elif command -v yum &> /dev/null; then
            log "üì¶ Instalando curl..."
            sudo yum install -y curl
        elif command -v brew &> /dev/null; then
            log "üì¶ Instalando curl..."
            brew install curl
        else
            log "‚ö†Ô∏è No se pudo instalar curl autom√°ticamente. Inst√°lelo manualmente."
        fi
    fi
    
    # Verificar git
    if command -v git &> /dev/null; then
        log "‚úÖ git est√° disponible"
    else
        log "‚ö†Ô∏è git no est√° instalado (opcional para actualizaciones)"
    fi
}

# ===== CONSTRUIR IM√ÅGENES =====
build_images() {
    log "üî® Construyendo im√°genes Docker..."
    
    if docker-compose build; then
        log "‚úÖ Im√°genes construidas exitosamente"
    else
        log "‚ùå Error construyendo im√°genes"
        exit 1
    fi
}

# ===== PROBAR CONEXI√ìN DE BASE DE DATOS =====
test_database() {
    log "üß™ Probando base de datos..."
    
    # Iniciar solo PostgreSQL
    docker-compose up -d postgres
    
    # Esperar a que PostgreSQL est√© listo
    for i in {1..30}; do
        if docker exec postgres_ai_platform pg_isready -U postgres 2>/dev/null; then
            log "‚úÖ PostgreSQL est√° funcionando correctamente"
            docker-compose down
            return 0
        else
            log "‚è≥ Esperando PostgreSQL... ($i/30)"
            sleep 2
        fi
    done
    
    log "‚ùå PostgreSQL no responde despu√©s de 60 segundos"
    log "üìã Logs de PostgreSQL:"
    docker-compose logs postgres
    exit 1
}

# ===== MOSTRAR INFORMACI√ìN FINAL =====
show_final_info() {
    log "üéâ ¬°Instalaci√≥n completada exitosamente!"
    echo ""
    echo "üìã PR√ìXIMOS PASOS:"
    echo "=================="
    echo ""
    echo "1. Descargar el modelo LLM (recomendado):"
    echo "   ./ai-platform.sh"
    echo "   Opci√≥n 4: Descargar modelo Gemma 2B"
    echo ""
    echo "2. Iniciar todos los servicios:"
    echo "   ./ai-platform.sh"
    echo "   Opci√≥n 1: Iniciar todos los servicios"
    echo ""
    echo "3. Acceder a las aplicaciones:"
    echo "   ‚Ä¢ TextoSQL API: http://localhost:8001/docs"
    echo "   ‚Ä¢ Fraude API:   http://localhost:8000/docs"
    echo "   ‚Ä¢ LLM Server:   http://localhost:8080"
    echo "   ‚Ä¢ PostgreSQL:   localhost:8070"
    echo ""
    echo "üìñ COMANDOS √öTILES:"
    echo "==================="
    echo "‚Ä¢ Gesti√≥n completa:     ./ai-platform.sh"
    echo "‚Ä¢ Ver estado:           docker-compose ps"
    echo "‚Ä¢ Ver logs:             docker-compose logs [servicio]"
    echo "‚Ä¢ Parar servicios:      docker-compose down"
    echo ""
    echo "üí° CONSEJOS:"
    echo "============"
    echo "‚Ä¢ El modelo Gemma 2B (~1.5GB) es recomendado para empezar"
    echo "‚Ä¢ Aseg√∫rese de tener suficiente RAM libre antes de iniciar"
    echo "‚Ä¢ Los datos de PostgreSQL se mantienen entre reinicios"
    echo ""
}

# ===== FUNCI√ìN PRINCIPAL =====
main() {
    echo ""
    log "üöÄ Iniciando instalaci√≥n de AI Platform..."
    echo ""
    
    # Verificar requisitos
    check_requirements
    echo ""
    
    # Preparar proyecto
    prepare_project
    echo ""
    
    # Instalar dependencias
    install_dependencies
    echo ""
    
    # Construir im√°genes
    build_images
    echo ""
    
    # Probar base de datos
    test_database
    echo ""
    
    # Mostrar informaci√≥n final
    show_final_info
}

# Ejecutar funci√≥n principal
main "$@"